---
import { getSiteStats } from "../utils/getStats";

const stats = await getSiteStats();
---

<div class="site-stats bg-skin-card border border-skin-line rounded-lg p-4 mt-4">
  <h3 class="text-sm font-semibold text-skin-base mb-3 text-center">📊 网站统计</h3>
  
  <div class="grid grid-cols-2 md:grid-cols-4 gap-3 text-center">
    <!-- 文章数量 -->
    <div class="stat-item">
      <div class="text-lg font-bold text-skin-accent" id="post-count">
        {stats.totalPosts}
      </div>
      <div class="text-xs text-skin-muted">文章</div>
    </div>
    
    <!-- 总字数 -->
    <div class="stat-item">
      <div class="text-lg font-bold text-skin-accent" id="word-count">
        {stats.totalWords.toLocaleString()}
      </div>
      <div class="text-xs text-skin-muted">字数</div>
    </div>
    
    <!-- 访客数量 -->
    <div class="stat-item">
      <div class="text-lg font-bold text-skin-accent" id="visitor-count">
        <span class="loading">...</span>
      </div>
      <div class="text-xs text-skin-muted">访客</div>
    </div>
    
    <!-- 运行天数 -->
    <div class="stat-item">
      <div class="text-lg font-bold text-skin-accent" id="runtime-days">
        {stats.runtimeDays}
      </div>
      <div class="text-xs text-skin-muted">天</div>
    </div>
  </div>
  
  <!-- 额外信息 -->
  <div class="mt-3 pt-2 border-t border-skin-line">
    <div class="flex justify-between items-center text-xs text-skin-muted">
      <span>最后更新: {stats.lastUpdated}</span>
      <span id="visitor-ip" class="hidden md:inline">IP: <span class="loading">获取中...</span></span>
    </div>
  </div>
</div>

<script>
  // 简单的访客计数器（基于 localStorage）
  function getVisitorCount() {
    if (typeof window === "undefined") return 0;
    
    const STORAGE_KEY = "cihebi-blog-visitor-count";
    const VISITOR_KEY = "cihebi-blog-visited";
    
    // 检查是否是新访客
    const hasVisited = localStorage.getItem(VISITOR_KEY);
    
    if (!hasVisited) {
      // 新访客，增加计数
      const currentCount = parseInt(localStorage.getItem(STORAGE_KEY) || "0");
      const newCount = currentCount + 1;
      localStorage.setItem(STORAGE_KEY, newCount.toString());
      localStorage.setItem(VISITOR_KEY, "true");
      return newCount;
    }
    
    // 老访客，返回当前计数
    return parseInt(localStorage.getItem(STORAGE_KEY) || "0");
  }

  // 获取访客IP
  async function getVisitorIP() {
    try {
      const response = await fetch("https://api.ipify.org?format=json");
      const data = await response.json();
      return data.ip || "未知";
    } catch (error) {
      return "未知";
    }
  }
  
  // 客户端加载访客统计
  document.addEventListener("DOMContentLoaded", async () => {
    // 更新访客计数
    const visitorCountEl = document.getElementById("visitor-count");
    if (visitorCountEl) {
      const count = getVisitorCount();
      visitorCountEl.innerHTML = count.toLocaleString();
    }
    
    // 获取并显示访客IP
    const visitorIpEl = document.getElementById("visitor-ip");
    if (visitorIpEl) {
      try {
        const ip = await getVisitorIP();
        const ipSpan = visitorIpEl.querySelector(".loading");
        if (ipSpan) {
          ipSpan.textContent = ip;
        }
      } catch (error) {
        const ipSpan = visitorIpEl.querySelector(".loading");
        if (ipSpan) {
          ipSpan.textContent = "未知";
        }
      }
    }
  });
  
  // 实时运行时间更新
  function updateRuntime() {
    const startDate = new Date("2025-06-19"); // 与 getStats.ts 中的日期保持一致
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - startDate.getTime());
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    const runtimeEl = document.getElementById("runtime-days");
    if (runtimeEl) {
      runtimeEl.textContent = `${diffDays}`;
      runtimeEl.title = `${diffDays}天${diffHours}小时`;
    }
  }
  
  // 每小时更新一次运行时间
  setInterval(updateRuntime, 3600000);
  updateRuntime();
</script>

<style>
  .stat-item {
    transition: transform 0.2s ease-in-out;
  }
  
  .stat-item:hover {
    transform: translateY(-2px);
  }
  
  .loading {
    opacity: 0.6;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
  }
  
  @media (max-width: 640px) {
    .site-stats {
      margin-left: -1rem;
      margin-right: -1rem;
      border-radius: 0;
      border-left: none;
      border-right: none;
    }
  }
</style>