---
import { render } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import DualComments from "@/components/DualComments.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import type { BlogPost } from "@/utils/getAllPosts";

export interface Props {
  post: BlogPost;
  posts: BlogPost[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id }) => ({
  slug: id,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <TableOfContents />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-3xl px-4 pb-12 xl:ml-auto xl:mr-auto",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="flex items-center gap-4">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" class="my-2" />
      <EditPost class="max-sm:hidden" {hideEditPost} {post} />
    </div>
    <article id="article" class="mx-auto prose mt-8 max-w-3xl">
      <Content />
    </article>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    <div
      class="flex flex-col items-center justify-between gap-6 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks />

      <button
        id="back-to-top"
        class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Back to Top</span>
      </button>
    </div>

    <!-- Prev/Next navigation -->
    {
      (prevPost || nextPost) && (
        <nav class="mt-24 flex justify-between" aria-label="Post navigation">
          {prevPost ? (
            <a
              href={`/posts/${prevPost.slug}`}
              class="group flex items-center gap-2 text-left hover:opacity-75"
            >
              <IconChevronLeft class="size-6" />
              <div>
                <div class="text-sm opacity-75">Previous</div>
                <div class="font-medium group-hover:text-accent">
                  {prevPost.title}
                </div>
              </div>
            </a>
          ) : (
            <div />
          )}
          {nextPost ? (
            <a
              href={`/posts/${nextPost.slug}`}
              class="group flex items-center gap-2 text-right hover:opacity-75"
            >
              <div>
                <div class="text-sm opacity-75">Next</div>
                <div class="font-medium group-hover:text-accent">
                  {nextPost.title}
                </div>
              </div>
              <IconChevronRight class="size-6" />
            </a>
          ) : (
            <div />
          )}
        </nav>
      )
    }
  </main>

  <DualComments />

  <Footer />
</Layout>

<script>
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-accent px-2 py-1 text-xs leading-4 text-accent-text font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await navigator.clipboard.writeText(codeBlock.innerText);
        copyButton.innerHTML = "Copied";
        setTimeout(() => {
          copyButton.innerHTML = copyButtonLabel;
        }, 700);
      });
    }
  }

  document.addEventListener("astro:page-load", attachCopyButtons);

  function attachBackToTop() {
    const backToTopButton = document.getElementById("back-to-top");
    if (backToTopButton) {
      backToTopButton.addEventListener("click", () => {
        document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
      });
    }
  }

  document.addEventListener("astro:page-load", attachBackToTop);
</script>

<style>
  /* ===== scrollbar ===== */
  html {
    overflow-y: scroll;
  }

  /* width */
  ::-webkit-scrollbar {
    width: 12px;
  }

  /* Track */
  ::-webkit-scrollbar-track {
    background-color: rgb(var(--color-fill));
  }

  /* Handle */
  ::-webkit-scrollbar-thumb {
    background-color: rgb(var(--color-card));
  }

  /* Handle on hover */
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(var(--color-card-muted));
  }
</style>
